<?php
/**
 * Zaboy lib (http://zaboy.org/lib/)
 * 
 * @copyright  Zaboychenko Andrey
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 */

namespace zaboy\test\res\DataStore;

use  zaboy\test\res\DataStore\AbstractTest;
use  Zend\Db\TableGateway\TableGateway;
use zaboy\res\DataStore\DataStoresAbstract;
use zaboy\res\DataStore\DataStoresException;
use Xiag\Rql\Parser\Node\Query\ScalarOperator;
use Xiag\Rql\Parser\Node\Query\LogicOperator;
use Xiag\Rql\Parser\Query;
use Xiag\Rql\Parser\Node;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-11 at 16:19:25.
 */
class ErrorDbTableTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var array
     */
    protected $_optionsDelault = array();

    /**
     * @var array
     */
    protected $config;
    
    
    /**
     * @var ContainerInterface
     */
    protected $container;    
    
    /**
     *
     * @var array 
     */

    protected $_itemsArrayDelault  =    
        array(
            array( 'id' => 1,'anotherId' => 10, 'fString' => 'val1', 'fFloat' => 400.0004),
            array( 'id' => 2,'anotherId' => 20, 'fString' => 'val2', 'fFloat' => 300.003),
            array( 'id' => 3,'anotherId' => 40, 'fString' => 'val2', 'fFloat' => 300.003),  
            array( 'id' => 4,'anotherId' => 30, 'fString' => 'val2', 'fFloat' => 100.1)          
        )
    ;
    

    protected $_itemsArrayEnhanced  =    
        array(
            array( 'id' => 1,'anotherId' => 10, 'fString' => 'val1', 'fFloat' => 400.0004, 'nll' => 1,      'abs' => 'val_abs'),
            array( 'id' => 2,'anotherId' => 20, 'fString' => 'val2', 'fFloat' => 300.003,  'nll' => null),
            array( 'id' => 3,'anotherId' => 40, 'fString' => 'val2', 'fFloat' => 300.003,  'nll' => null),
            array( 'id' => 4,'anotherId' => 30, 'fString' => 'val2', 'fFloat' => 100.1 ,   'nll' => null)
        )
    ;
    /**
     * @var Zend\Db\TableGateway\TableGateway
     */
    protected $object;

    /**
     * @var Zend\Db\Adapter\Adapter
     */
    protected $adapter;   
    
    protected $dbTableName;
    
    protected $configTableDefault = array(
        'id' => 'INT NOT NULL AUTO_INCREMENT PRIMARY KEY',
        'anotherId' => 'INT NOT NULL',
        'fString' => 'CHAR(20)',
        'fInt' => 'INT'
    );
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->container = include './config/container.php';
        $this->config = $this->container->get('config')['dataStore'];
        $this->dbTableName = $this->config['testDbTable']['tableName'];
        $this->adapter = $this->container->get('db');
        $this->object = $this->container->get('testDbTable');    
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $quoteTableName = $this->adapter->platform->quoteIdentifier($this->dbTableName) ;
        $deleteStatementStr = "DROP TABLE IF EXISTS " .  $quoteTableName;
        $deleteStatement = $this->adapter->query($deleteStatementStr);
        $deleteStatement->execute();
        
    }

    /**
     * 
     * @param array $data
     */
    protected function _getDbTableFilds($data) {
        $record = array_shift($data);
        reset($record);
        $firstKey = key($record);
        $firstValue = array_shift($record);
        $dbTableFilds = '';
        if (is_string($firstValue)) {
            $dbTableFilds = '`' . $firstKey . '` CHAR(80) PRIMARY KEY';
        } elseif (is_integer($firstValue)) {
            $dbTableFilds = '`' . $firstKey . '` INT NOT NULL AUTO_INCREMENT PRIMARY KEY';
        } else {
            trigger_error("Type of primary key must be int or string", E_USER_ERROR);
        }
        foreach ($record as $key => $value) {
            if (is_string($value)) {
                $fildType = ', `' . $key . '` CHAR(80)';
            } elseif (is_integer($value)) {
                $fildType = ', `' . $key . '` INT';
            } elseif (is_float($value)) {
                $fildType = ', `' . $key . '` DOUBLE PRECISION';
            } else {
                trigger_error("Type of fild of array isn't supported.", E_USER_ERROR);
            }
            $dbTableFilds = $dbTableFilds . $fildType;
        }
        return $dbTableFilds;
    }

    /**
     * This method init $this->object
     */
    protected function _prepareTable($data) {

        $quoteTableName = $this->adapter->platform->quoteIdentifier($this->dbTableName) ;
       
        $deleteStatementStr = "DROP TABLE IF EXISTS " .  $quoteTableName;
        $deleteStatement = $this->adapter->query($deleteStatementStr);
        $deleteStatement->execute();

        $createStr = "CREATE TABLE  " . $quoteTableName;
        $filds = $this->_getDbTableFilds($data);
        $createStatementStr = $createStr . '(' . $filds . ') ENGINE = InnoDB CHARACTER SET utf8 COLLATE utf8_general_ci;';
        $createStatement = $this->adapter->query($createStatementStr);
        $createStatement->execute();
    }

    /**
     * This method init $this->object
     */
    protected function _initObject($data = null) {
        
        if (is_null($data)) {
            $data = $this->_itemsArrayDelault;
        }
        
        $this->_prepareTable($data);
        $dbTable = new TableGateway($this->dbTableName, $this->adapter);

        foreach ($data as $record) {
            $dbTable->insert($record);
        }
    }

    /*     * ************************** Identifier *********************** */
    public function test_QueryEq()
    {
        $this->_initObject();
        $query = new Query();
        $eqNode = new ScalarOperator\EqNode(
            'fString', 'val1'
        );
        $query->setQuery($eqNode);
        $this->assertEquals(
            $this->_itemsArrayDelault[0],
            $this->object->query($query)[0]
        );
    }  
}
